$(function() {

    init();

    function prettify(data) {
        return {
            currentColour : data.activePlayer.colour,
            activePlayer : data.activePlayer,
            rollsLeft : data.rollsLeft,
            players : data.players.map((playerArray) => playerArray[1]),
            currentRoll : data.currentRoll,
            waitingForMove : data.waitingForMove
        };
    }

    //SUCKS

    function setFields(player) {
        let playerClasses = `${player.colour} ${player.colour}-field-cell`;
        let nonGoalFields = player.occupiedFields.filter((field) => !(field.includes("goal")));
        nonGoalFields.forEach(field => {
            $(`#${field}`).addClass(playerClasses);
        });
    }

    function setGoal(player) {
        let playerColourClass = `${player.colour}`;
        let occupiedGoalFields = player.occupiedFields.filter((field) => field.includes("goal"));
        occupiedGoalFields.forEach(field => {
            $(`#${field}`).addClass(playerColourClass);
        });
    }

    function cleanHouse(player) {
        let playerHouseCells = $(`.${player.colour}-house-cell`);
        playerHouseCells.each((index) => {
            if (index < player.inHouse) {
                $(`#house-${player.colour}-${index + 1}`).addClass(player.colour);
            }
        });
    }

    function setMoveHandler(fieldId) {
        let routeString = "/move/" + fieldId;
        $(`#${fieldId}`).on("click", () => {
            $.get(routeString).then(res => handleResponse(prettify(res)));
            $(".rollbutton").prop("disabled", false).removeClass("disabled-button");
        });
    }


    function showRoll(roll) {
        return roll; // === 0 ? "" : roll
    }

    function handleResponse(data) {
        $(".die").children().first().fadeOut(100, () => {
            $(".die").html(`<h1 class="roll-value">${showRoll(data.currentRoll)}</h1>`)
        });
        $("#turn").removeClass().addClass(`${data.activePlayer.colour}`)
        $(".field-cell").removeClass("red red-field-cell blue blue-field-cell green green-field-cell yellow yellow-field-cell").off()
        $(".goal-cell").removeClass("red blue green yellow").off()  
        $(".house-cell").removeClass("red red-field-cell blue blue-field-cell green green-field-cell yellow yellow-field-cell").off()

        data.players.forEach(player => {
            cleanHouse(player);
            setFields(player);
            setGoal(player);
        });
    }

    function attachMoveTriggers(data) {
        data.activePlayer.occupiedFields.forEach(field => setMoveHandler(field))
    }

    function init() {

        $("#1").addClass("start-field")
        $("#11").addClass("start-field")
        $("#21").addClass("start-field")
        $("#31").addClass("start-field")

        $.get("@{InitR}").then(data => handleResponse(prettify(data)));

        $(".rollbutton").on("click", () => {
            $.get("@{RollR}").then(data => {
                console.log("got data from click")
                let cleanData = prettify(data);
                handleResponse(cleanData);
                console.log(cleanData)
                console.log(cleanData.currentRoll)
                console.log(cleanData.waitingForMove)
                if (cleanData.waitingForMove) {
                    $(".rollbutton").prop("disabled", true).addClass("disabled-button")
                    attachMoveTriggers(cleanData)
                }
            });
        });

    }

});